{"version":3,"sources":["components/Todo.js","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["Todo","_ref","todo","index","completeTodo","removeTodo","react_default","a","createElement","className","style","textDecoration","isCompleted","text","onClick","TodoForm","addTodo","_useState","useState","_useState2","Object","slicedToArray","value","setValue","onSubmit","e","preventDefault","type","onChange","target","placeholder","App","todos","setTodos","newTodos","toConsumableArray","splice","map","components_Todo","key","components_TodoForm","concat","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uKAkBeA,MAhBf,SAAAC,GAAyD,IAAzCC,EAAyCD,EAAzCC,KAAMC,EAAmCF,EAAnCE,MAAOC,EAA4BH,EAA5BG,aAAcC,EAAcJ,EAAdI,WAC1C,OACCC,EAAAC,EAAAC,cAAA,OACCC,UAAU,OACVC,MAAO,CAAEC,eAAgBT,EAAKU,YAAc,eAAiB,KAE5DV,EAAKW,KAENP,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAMV,EAAaD,KAASD,EAAKU,YAAc,WAAa,QAC7EN,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAMT,EAAWF,KAAlC,QCaWY,MAvBf,SAAAd,GAA+B,IAAXe,EAAWf,EAAXe,QAAWC,EACJC,mBAAS,IADLC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACvBK,EADuBH,EAAA,GAChBI,EADgBJ,EAAA,GAU9B,OACCb,EAAAC,EAAAC,cAAA,QAAMgB,SARc,SAAAC,GACpBA,EAAEC,iBACGJ,IACLN,EAAQM,GACRC,EAAS,OAKRjB,EAAAC,EAAAC,cAAA,SACCmB,KAAK,OACLlB,UAAU,QACVa,MAAOA,EACPM,SAAU,SAAAH,GAAC,OAAIF,EAASE,EAAEI,OAAOP,QACjCQ,YAAY,6BCuCDC,MApDf,WAAe,IAAAd,EACYC,mBAAS,CAClC,CACCL,KAAM,uBACND,aAAa,GAEd,CACCC,KAAM,0BACND,aAAa,GAEd,CACCC,KAAM,0BACND,aAAa,KAZDO,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACPe,EADOb,EAAA,GACAc,EADAd,EAAA,GAqBRf,EAAe,SAAAD,GACpB,IAAM+B,EAAQd,OAAAe,EAAA,EAAAf,CAAOY,GACrBE,EAAS/B,GAAOS,aAAesB,EAAS/B,GAAOS,YAC/CqB,EAASC,IAGJ7B,EAAa,SAAAF,GAClB,IAAM+B,EAAQd,OAAAe,EAAA,EAAAf,CAAOY,GACrBE,EAASE,OAAOjC,EAAO,GACvB8B,EAASC,IAGV,OACC5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,kCACCuB,EAAMK,IAAI,SAACnC,EAAMC,GAAP,OACVG,EAAAC,EAAAC,cAAC8B,EAAD,CACCC,IAAKpC,EACLA,MAAOA,EACPD,KAAMA,EACNE,aAAcA,EACdC,WAAYA,MAGdC,EAAAC,EAAAC,cAACgC,EAAD,CAAUxB,QA9BG,SAAAH,GACf,IAAMqB,EAAQd,OAAAe,EAAA,EAAAf,CAAOY,GAAPS,OAAA,CAAc,CAAE5B,UAC9BoB,EAASC,SCZSQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8314cfb3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Todo({ todo, index, completeTodo, removeTodo }) {\n\treturn (\n\t\t<div\n\t\t\tclassName=\"todo\"\n\t\t\tstyle={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}\n\t\t>\n\t\t\t{todo.text}\n\t\t\t\n\t\t\t<div>\n\t\t\t\t<button onClick={() => completeTodo(index)}>{todo.isCompleted ? \"Not done\" : \"Done\"}</button>\n\t\t\t\t<button onClick={() => removeTodo(index)}>x</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Todo;","import React, { useState } from \"react\";\n\nfunction TodoForm({ addTodo }) {\n\tconst [value, setValue] = useState(\"\");\n\t\n\tconst handleSubmit = e => {\n\t\te.preventDefault();\n\t\tif (!value) return;\n\t\taddTodo(value);\n\t\tsetValue(\"\");\n\t};\n\t\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tclassName=\"input\"\n\t\t\t\tvalue={value}\n\t\t\t\tonChange={e => setValue(e.target.value)}\n\t\t\t\tplaceholder=\" Enter your task\"\n\t\t\t/>\n\t\t</form>\n\t);\n}\n\nexport default TodoForm;","import React, { useState } from \"react\";\nimport Todo from './components/Todo';\nimport TodoForm from './components/TodoForm';\nimport \"./App.css\";\n\n\nfunction App() {\n\tconst [todos, setTodos] = useState([\n\t\t{\n\t\t\ttext: \"React Hooks in Depth\",\n\t\t\tisCompleted: false\n\t\t},\n\t\t{\n\t\t\ttext: \"Write Articles @ Medium\",\n\t\t\tisCompleted: false\n\t\t},\n\t\t{\n\t\t\ttext: \"Share article at Reddit\",\n\t\t\tisCompleted: false\n\t\t}\n\t]);\n\t\n\tconst addTodo = text => {\n\t\tconst newTodos = [...todos, { text }];\n\t\tsetTodos(newTodos);\n\t};\n\t\n\tconst completeTodo = index => {\n\t\tconst newTodos = [...todos];\n\t\tnewTodos[index].isCompleted = !newTodos[index].isCompleted;\n\t\tsetTodos(newTodos);\n\t};\n\t\n\tconst removeTodo = index => {\n\t\tconst newTodos = [...todos];\n\t\tnewTodos.splice(index, 1);\n\t\tsetTodos(newTodos);\n\t};\n\t\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<div className=\"todo-list\">\n\t\t\t\t<h1 className=\"title\">Create a Todo with React Hooks</h1>\n\t\t\t\t{todos.map((todo, index) => (\n\t\t\t\t\t<Todo\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\ttodo={todo}\n\t\t\t\t\t\tcompleteTodo={completeTodo}\n\t\t\t\t\t\tremoveTodo={removeTodo}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t\t<TodoForm addTodo={addTodo} />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}